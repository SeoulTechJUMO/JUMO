<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:proj="clr-namespace:JUMO.UI"
                    xmlns:ctrl="clr-namespace:JUMO.UI.Controls"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Skin/Common.xaml" />
        <ResourceDictionary Source="Skin/Buttons.xaml" />
        <ResourceDictionary Source="Skin/ScrollBars.xaml" />
        <ResourceDictionary Source="Skin/Sliders.xaml" />
        <ResourceDictionary Source="Skin/Tabs.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- TextBox Metrics -->
    <Thickness x:Key="TextBoxPadding">5,3</Thickness>

    <!-- Label Styles -->
    <Style TargetType="Label">
        <Setter Property="Padding" Value="{StaticResource ControlMargin}" />
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}" />
    </Style>

    <!-- TextBox Styles -->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource SegmentedControlStyle}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}"/>
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="Padding" Value="{StaticResource TextBoxPadding}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{StaticResource LightBackgroundColor}" SnapsToDevicePixels="True">
                        <Grid>
                            <Rectangle Margin="0,1,0,0" RadiusX="1.4" RadiusY="1.4" Fill="{TemplateBinding Background}" />
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}" />
                            <Setter Property="BorderBrush" Value="{StaticResource LightDisabledControlBorderColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- NumericUpDown Style -->
    <Style TargetType="{x:Type ctrl:NumericUpDown}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
    </Style>

    <!-- Knob Styles -->
    <Style TargetType="{x:Type ctrl:Knob}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="KnobRadius" Value="8" />
        <Setter Property="TrackPadding" Value="4" />
        <Setter Property="TrackLength" Value="4" />
        <Setter Property="KnobFace" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="Indicator" Value="{StaticResource LightPrimaryTextColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}" />
    </Style>

    <Style x:Key="DottedTrackKnobStyle" TargetType="{x:Type ctrl:Knob}" BasedOn="{StaticResource {x:Type ctrl:Knob}}">
        <Setter Property="TrackLength" Value="1.5" />
    </Style>

    <Style x:Key="TracklessKnobStyle" TargetType="{x:Type ctrl:Knob}" BasedOn="{StaticResource {x:Type ctrl:Knob}}">
        <Setter Property="TrackPadding" Value="0" />
        <Setter Property="TrackLength" Value="0" />
    </Style>

    <!-- ComboBox Styles -->
    <StreamGeometry x:Key="ComboBoxToggleButtonArrowGeometry">
        F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z
    </StreamGeometry>

    <Style x:Key="ComboBoxToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}" />
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="pushEffectBorder">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.BorderRadius)}">
                            <DockPanel>
                                <Border DockPanel.Dock="Right"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1,0,0,0"
                                        MinWidth="{x:Static SystemParameters.VerticalScrollBarWidth}"
                                        Width="0">
                                    <Path x:Name="arrow"
                                          Fill="{StaticResource LightPrimaryTextColor}"
                                          UseLayoutRounding="True"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="{StaticResource ComboBoxToggleButtonArrowGeometry}" />
                                </Border>
                                <Grid>
                                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Grid>
                            </DockPanel>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource LightSecondaryTextColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource LightDisabledControlFaceColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource LightDisabledControlBorderColor}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Left">
                <Setter Property="BorderThickness" Value="{StaticResource LeftSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource LeftSegmentControlBorderRadius}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Center">
                <Setter Property="BorderThickness" Value="{StaticResource CenterSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource CenterSegmentControlBorderRadius}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Right">
                <Setter Property="BorderThickness" Value="{StaticResource RightSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource RightSegmentControlBorderRadius}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="None" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Left" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedLeftSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Center" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedCenterSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Right" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedRightSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="None" />
                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Left" />
                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedLeftSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Center" />
                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedCenterSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Right" />
                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedRightSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Border x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton
                Style="{StaticResource ComboBoxToggleButtonStyle}"
                proj:SkinHelper.Segment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.Segment)}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </ToggleButton>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Border x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton Grid.ColumnSpan="2" Style="{StaticResource ComboBoxToggleButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <TextBox x:Name="PART_EditableTextBox"
                     Style="{StaticResource {x:Type TextBox}}"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                     IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                     Margin="0,0,1,0"
                     Padding="{TemplateBinding Padding}"
                     proj:SkinHelper.Segment="Left" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="{StaticResource TextBoxPadding}"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Left">
                <Setter Property="Margin" Value="{StaticResource LeftSegmentControlMargin}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Right">
                <Setter Property="Margin" Value="{StaticResource RightSegmentControlMargin}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Center">
                <Setter Property="Margin" Value="{StaticResource CenterSegmentControlMargin}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>