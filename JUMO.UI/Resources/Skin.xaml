<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:proj="clr-namespace:JUMO.UI"
                    xmlns:ctrl="clr-namespace:JUMO.UI.Controls"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- Colors -->
    <SolidColorBrush x:Key="LightBackgroundColor" Color="#ffced7e0" />
    <SolidColorBrush x:Key="LightPrimaryTextColor" Color="#ff18003c" />
    <SolidColorBrush x:Key="LightSecondaryTextColor" Color="#ff585a81" />
    <SolidColorBrush x:Key="DarkBackgroundColor" Color="#ff18003c" />
    <SolidColorBrush x:Key="DarkPrimaryTextColor" Color="#ffced7e0" />
    <SolidColorBrush x:Key="DarkSecondaryTextColor" Color="#ff8498b1" />

    <SolidColorBrush x:Key="LightControlFaceColor" Color="#ffbbc7d3" />
    <SolidColorBrush x:Key="LightControlBorderColor" Color="#ff97a8bc" />
    <SolidColorBrush x:Key="LightDisabledControlFaceColor" Color="#ffced7e0" />
    <SolidColorBrush x:Key="LightDisabledControlBorderColor" Color="#ffbbc7d3" />

    <SolidColorBrush x:Key="IndicatorLightColor1" Color="#ffbae854" />
    <SolidColorBrush x:Key="IndicatorLightColor2" Color="#ffffd66d" />
    <SolidColorBrush x:Key="IndicatorLightColor3" Color="#ff54e8e6" />

    <!-- Common UI Metrics -->
    <sys:Double x:Key="UIFontSize">12.0</sys:Double>
    <Thickness x:Key="ControlMargin">3</Thickness>
    <Thickness x:Key="LeftSegmentControlMargin">3,3,0,3</Thickness>
    <Thickness x:Key="CenterSegmentControlMargin">0,3</Thickness>
    <Thickness x:Key="RightSegmentControlMargin">0,3,3,3</Thickness>
    <Thickness x:Key="ControlBorderThickness">1,1,1,2</Thickness>
    <Thickness x:Key="LeftSegmentControlBorderThickness">1,1,0,2</Thickness>
    <Thickness x:Key="CenterSegmentControlBorderThickness">1,1,0,2</Thickness>
    <Thickness x:Key="RightSegmentControlBorderThickness">1,1,1,2</Thickness>
    <CornerRadius x:Key="ControlBorderRadius">2</CornerRadius>
    <CornerRadius x:Key="LeftSegmentControlBorderRadius">2,0,0,2</CornerRadius>
    <CornerRadius x:Key="CenterSegmentControlBorderRadius">0</CornerRadius>
    <CornerRadius x:Key="RightSegmentControlBorderRadius">0,2,2,0</CornerRadius>

    <!-- Button Metrics -->
    <Thickness x:Key="ButtonPadding">8,3</Thickness>
    <Thickness x:Key="DialogButtonPadding">15,3</Thickness>
    <Thickness x:Key="IconButtonPadding">3</Thickness>
    <Thickness x:Key="PressedButtonBorderThickness">1</Thickness>
    <Thickness x:Key="PressedLeftSegmentButtonBorderThickness">1,1,0,1</Thickness>
    <Thickness x:Key="PressedCenterSegmentButtonBorderThickness">1,1,0,1</Thickness>
    <Thickness x:Key="PressedRightSegmentButtonBorderThickness">1</Thickness>
    <sys:Double x:Key="ButtonIconWidth">20</sys:Double>
    <sys:Double x:Key="ButtonIconHeight">20</sys:Double>
    <Thickness x:Key="BulletToggleButtonPadding">11,3,6,3</Thickness>
    <Thickness x:Key="BarToggleButtonPadding">8,3,8,5</Thickness>
    <Thickness x:Key="BulletIconToggleButtonPadding">11,3,3,3</Thickness>
    <Thickness x:Key="BarIconToggleButtonPadding">3,3,3,7</Thickness>
    <Thickness x:Key="ToggleButtonBulletMargin">2</Thickness>
    <Thickness x:Key="ToggleButtonBarMargin">9,2</Thickness>

    <!-- TextBox Metrics -->
    <Thickness x:Key="TextBoxPadding">5,3</Thickness>

    <Style x:Key="SegmentedControlStyle" TargetType="Control">
        <Style.Triggers>
            <Trigger Property="proj:SkinHelper.Segment" Value="Left">
                <Setter Property="Margin" Value="{StaticResource LeftSegmentControlMargin}" />
                <Setter Property="BorderThickness" Value="{StaticResource LeftSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource LeftSegmentControlBorderRadius}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Center">
                <Setter Property="Margin" Value="{StaticResource CenterSegmentControlMargin}" />
                <Setter Property="BorderThickness" Value="{StaticResource CenterSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource CenterSegmentControlBorderRadius}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Right">
                <Setter Property="Margin" Value="{StaticResource RightSegmentControlMargin}" />
                <Setter Property="BorderThickness" Value="{StaticResource RightSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource RightSegmentControlBorderRadius}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SegmentedButtonStyle" TargetType="ButtonBase" BasedOn="{StaticResource SegmentedControlStyle}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="None" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Left" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedLeftSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Center" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedCenterSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Right" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedRightSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Button Styles -->
    <Style TargetType="ButtonBase" BasedOn="{StaticResource SegmentedButtonStyle}">
        <Setter Property="Background" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="FontSize" Value="{StaticResource UIFontSize}" />
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding Path=(proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}" />
    </Style>

    <Style x:Key="DialogButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="{StaticResource DialogButtonPadding}" />
    </Style>

    <Style TargetType="ToggleButton" BasedOn="{StaticResource SegmentedButtonStyle}">
        <Setter Property="Background" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="FontSize" Value="{StaticResource UIFontSize}" />
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}" />
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
    </Style>

    <Style x:Key="BulletToggleButtonStyleBase" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="{StaticResource BulletToggleButtonPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding Path=(proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid HorizontalAlignment="Left" Margin="{StaticResource ToggleButtonBulletMargin}" Width="7" Height="7">
                                    <Ellipse x:Name="indicatorLight" Stroke="{StaticResource LightSecondaryTextColor}" StrokeThickness="1" Fill="{StaticResource LightSecondaryTextColor}" />
                                </Grid>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="indicatorLight" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.IndicatorBrush)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BarToggleButtonStyleBase" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="{StaticResource BarToggleButtonPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding Path=(proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid VerticalAlignment="Bottom" Margin="{StaticResource ToggleButtonBarMargin}" Height="3">
                                    <Border x:Name="indicatorLight" BorderBrush="{StaticResource LightSecondaryTextColor}" BorderThickness="1" CornerRadius="1" Background="{StaticResource LightSecondaryTextColor}" />
                                </Grid>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="indicatorLight" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.IndicatorBrush)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FaceToggleButtonStyleBase" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding Path=(proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.IndicatorBrush)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BulletToggleButtonStyle1" TargetType="ToggleButton" BasedOn="{StaticResource BulletToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor1}" />
    </Style>

    <Style x:Key="BulletToggleButtonStyle2" TargetType="ToggleButton" BasedOn="{StaticResource BulletToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor2}" />
    </Style>

    <Style x:Key="BulletToggleButtonStyle3" TargetType="ToggleButton" BasedOn="{StaticResource BulletToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor3}" />
    </Style>

    <Style x:Key="BarToggleButtonStyle1" TargetType="ToggleButton" BasedOn="{StaticResource BarToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor1}" />
    </Style>

    <Style x:Key="BarToggleButtonStyle2" TargetType="ToggleButton" BasedOn="{StaticResource BarToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor2}" />
    </Style>

    <Style x:Key="BarToggleButtonStyle3" TargetType="ToggleButton" BasedOn="{StaticResource BarToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor3}" />
    </Style>

    <Style x:Key="FaceToggleButtonStyle1" TargetType="ToggleButton" BasedOn="{StaticResource FaceToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor1}" />
    </Style>

    <Style x:Key="FaceToggleButtonStyle2" TargetType="ToggleButton" BasedOn="{StaticResource FaceToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor2}" />
    </Style>

    <Style x:Key="FaceToggleButtonStyle3" TargetType="ToggleButton" BasedOn="{StaticResource FaceToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor3}" />
    </Style>

    <Style x:Key="NumberUpDownButtonStyle" TargetType="RepeatButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="{Binding Path=(proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBox Styles -->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource SegmentedControlStyle}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}"/>
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="Padding" Value="{StaticResource TextBoxPadding}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{StaticResource LightBackgroundColor}" SnapsToDevicePixels="True">
                        <Grid>
                            <Rectangle Margin="0,1,0,0" RadiusX="1.4" RadiusY="1.4" Fill="{TemplateBinding Background}" />
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}" />
                            <Setter Property="BorderBrush" Value="{StaticResource LightDisabledControlBorderColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- NumericUpDown Style -->
    <Style TargetType="{x:Type ctrl:NumericUpDown}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
    </Style>

    <!-- Knob Styles -->
    <Style TargetType="{x:Type ctrl:Knob}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="KnobRadius" Value="8" />
        <Setter Property="TrackPadding" Value="4" />
        <Setter Property="TrackLength" Value="4" />
        <Setter Property="KnobFace" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="Indicator" Value="{StaticResource LightPrimaryTextColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}" />
    </Style>

    <Style x:Key="DottedTrackKnobStyle" TargetType="{x:Type ctrl:Knob}" BasedOn="{StaticResource {x:Type ctrl:Knob}}">
        <Setter Property="TrackLength" Value="1.5" />
    </Style>

    <Style x:Key="TracklessKnobStyle" TargetType="{x:Type ctrl:Knob}" BasedOn="{StaticResource {x:Type ctrl:Knob}}">
        <Setter Property="TrackPadding" Value="0" />
        <Setter Property="TrackLength" Value="0" />
    </Style>

    <!-- TabControl Styles -->
    <Style TargetType="TabControl">
        <Setter Property="Background" Value="{StaticResource LightBackgroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="BorderThickness" Value="1,0,1,1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        <Border Grid.Row="1" Grid.Column="0" BorderBrush="{StaticResource DarkBackgroundColor}" BorderThickness="0,2,0,0" />
                        <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="2" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource DarkPrimaryTextColor}"/>
        <Setter Property="Background" Value="{StaticResource LightControlBorderColor}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0,1,0" Background="{TemplateBinding Background}" Margin="0">
                            <Border x:Name="innerBorder" BorderBrush="{StaticResource DarkBackgroundColor}" BorderThickness="1,1,1,0" Background="{StaticResource DarkBackgroundColor}" Opacity="0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False"  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseTabButtonStyle" TargetType="Button">
        <Setter Property="Margin" Value="10,0,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="Transparent">
                        <Canvas x:Name="glyphCanvas" Width="10" Height="8" Opacity="0">
                            <Path Fill="{StaticResource IndicatorLightColor2}" Data="M0,0L2,0L5,3L8,0L10,0L6,4L10,8L8,8L5,5L2,8L0,8L4,4Z" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="glyphCanvas" Value="1" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="glyphCanvas" Value="0.75" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Slider Styles -->
    <Style TargetType="Slider">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                            <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                            <Border x:Name="TrackBackground" Background="{StaticResource LightSecondaryTextColor}" BorderBrush="{StaticResource LightControlBorderColor}" BorderThickness="1" CornerRadius="1" Height="3" Margin="5,0" Grid.Row="1" VerticalAlignment="Center">
                                <Canvas>
                                    <Rectangle x:Name="PART_SelectionRange" Fill="{StaticResource IndicatorLightColor2}" Height="1" Visibility="Hidden" />
                                </Canvas>
                            </Border>
                            <Track x:Name="PART_Track" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="Slider.DecreaseLarge">
                                        <RepeatButton.Style>
                                            <Style TargetType="{x:Type RepeatButton}">
                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="IsTabStop" Value="False"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </RepeatButton.Style>
                                    </RepeatButton>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="Slider.IncreaseLarge">
                                        <RepeatButton.Style>
                                            <Style TargetType="{x:Type RepeatButton}">
                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="IsTabStop" Value="False"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </RepeatButton.Style>
                                    </RepeatButton>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" VerticalAlignment="Center" Width="11">
                                        <Thumb.Template>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <ControlTemplate.Resources>
                                                    <StreamGeometry x:Key="gripGeometry">
                                                        M 2 0 L 8 0 A 2 2 0 0 1 10 2 L 10 11.171573 A 2 2 0 0 1 9.414214 12.585786 L 6.414214 15.585786 A 2 2 0 0 1 3.585786 15.585786 L 0.585786 12.585786 A 2 2 0 0 1 0 11.171573 L 0 2 A 2 2 0 0 1 2 0 Z
                                                    </StreamGeometry>
                                                </ControlTemplate.Resources>
                                                <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                                                    <Path x:Name="gripShadow" Margin="0,1,0,0" Width="10" Height="17" Fill="{StaticResource LightControlBorderColor}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource LightControlBorderColor}" StrokeThickness="1" Data="{StaticResource gripGeometry}" UseLayoutRounding="True" VerticalAlignment="Center" />
                                                    <Path x:Name="grip" Width="10" Height="17" Fill="{StaticResource LightControlFaceColor}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource LightControlBorderColor}" StrokeThickness="1" Data="{StaticResource gripGeometry}" UseLayoutRounding="True" VerticalAlignment="Center" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsDragging" Value="True">
                                                        <Setter Property="Margin" TargetName="grip" Value="0,1,0,0" />
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource LightDisabledControlFaceColor}"/>
                                                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource LightDisabledControlBorderColor}"/>
                                                        <Setter Property="Fill" TargetName="gripShadow" Value="{StaticResource LightDisabledControlBorderColor}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Thumb.Template>
                                    </Thumb>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                            <Setter Property="Template" TargetName="Thumb">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                                            <Path x:Name="grip" Data="M0,6C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6z" Fill="#FFF0F0F0" Stretch="Fill" SnapsToDevicePixels="True" Stroke="#FFACACAC" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsDragging" Value="True">
                                                <Setter Property="Fill" TargetName="grip" Value="#FFDAECFC"/>
                                                <Setter Property="Stroke" TargetName="grip" Value="#FF569DE5"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="grip" Value="#FFF0F0F0"/>
                                                <Setter Property="Stroke" TargetName="grip" Value="#FFD9D9D9"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                            <Setter Property="Template" TargetName="Thumb">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                                            <Path x:Name="grip" Data="M0,12C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12z" Fill="#FFF0F0F0" Stretch="Fill" SnapsToDevicePixels="True" Stroke="#FFACACAC" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsDragging" Value="True">
                                                <Setter Property="Fill" TargetName="grip" Value="#FFDAECFC"/>
                                                <Setter Property="Stroke" TargetName="grip" Value="#FF569DE5"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="grip" Value="#FFF0F0F0"/>
                                                <Setter Property="Stroke" TargetName="grip" Value="#FFD9D9D9"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsSelectionRangeEnabled" Value="True">
                            <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBar Styles -->
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border"
                            Background="{StaticResource LightControlBorderColor}"
                            CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.BorderRadius)}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightControlFaceColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="BorderThickness" Value="0,1,0,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Rectangle x:Name="rectangle" Fill="{StaticResource LightControlBorderColor}" SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ScrollBarThumbVertical}">
        <Setter Property="BorderThickness" Value="1,0,1,0" />
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{StaticResource LightControlFaceColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlFaceColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Row="1"/>
                        <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" Style="{StaticResource ScrollBarButton}" proj:SkinHelper.BorderRadius="2,2,0,0">
                            <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z" Fill="{StaticResource LightPrimaryTextColor}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" Grid.Row="2" Style="{StaticResource ScrollBarButton}" proj:SkinHelper.BorderRadius="0,0,2,2">
                            <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" Fill="{StaticResource LightPrimaryTextColor}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource DarkPrimaryTextColor}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource DarkPrimaryTextColor}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource LightSecondaryTextColor}"/>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="BorderThickness" Value="0,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1"/>
                                <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" Style="{StaticResource ScrollBarButton}" proj:SkinHelper.BorderRadius="2,0,0,2">
                                    <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" Fill="{StaticResource LightPrimaryTextColor}" Margin="3" Stretch="Uniform"/>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" Style="{StaticResource ScrollBarButton}" proj:SkinHelper.BorderRadius="0,2,2,0">
                                    <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" Fill="{StaticResource LightPrimaryTextColor}" Margin="3" Stretch="Uniform"/>
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource DarkPrimaryTextColor}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource DarkPrimaryTextColor}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource LightSecondaryTextColor}"/>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource LightSecondaryTextColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>