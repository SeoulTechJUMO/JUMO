<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:proj="clr-namespace:JUMO.UI"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- Colors -->
    <SolidColorBrush x:Key="LightBackgroundColor" Color="#ffced7e0" />
    <SolidColorBrush x:Key="LightPrimaryTextColor" Color="#ff18003c" />
    <SolidColorBrush x:Key="LightSecondaryTextColor" Color="#ff585a81" />
    <SolidColorBrush x:Key="DarkBackgroundColor" Color="#ff18003c" />
    <SolidColorBrush x:Key="DarkPrimaryTextColor" Color="#ffced7e0" />
    <SolidColorBrush x:Key="DarkSecondaryTextColor" Color="#ff8498b1" />

    <SolidColorBrush x:Key="LightControlFaceColor" Color="#ffbbc7d3" />
    <SolidColorBrush x:Key="LightControlBorderColor" Color="#ff97a8bc" />
    <SolidColorBrush x:Key="LightDisabledControlFaceColor" Color="#ffced7e0" />
    <SolidColorBrush x:Key="LightDisabledControlBorderColor" Color="#ffbbc7d3" />

    <SolidColorBrush x:Key="IndicatorLightColor1" Color="#ffbae854" />
    <SolidColorBrush x:Key="IndicatorLightColor2" Color="#ffffd66d" />
    <SolidColorBrush x:Key="IndicatorLightColor3" Color="#ff54e8e6" />

    <!-- Common UI Metrics -->
    <sys:Double x:Key="UIFontSize">12.0</sys:Double>
    <Thickness x:Key="ControlMargin">3</Thickness>
    <Thickness x:Key="LeftSegmentControlMargin">3,3,0,3</Thickness>
    <Thickness x:Key="CenterSegmentControlMargin">0,3</Thickness>
    <Thickness x:Key="RightSegmentControlMargin">0,3,3,3</Thickness>
    <Thickness x:Key="ControlBorderThickness">1,1,1,2</Thickness>
    <Thickness x:Key="LeftSegmentControlBorderThickness">1,1,0,2</Thickness>
    <Thickness x:Key="CenterSegmentControlBorderThickness">1,1,0,2</Thickness>
    <Thickness x:Key="RightSegmentControlBorderThickness">1,1,1,2</Thickness>
    <CornerRadius x:Key="ControlBorderRadius">2</CornerRadius>
    <CornerRadius x:Key="LeftSegmentControlBorderRadius">2,0,0,2</CornerRadius>
    <CornerRadius x:Key="CenterSegmentControlBorderRadius">0</CornerRadius>
    <CornerRadius x:Key="RightSegmentControlBorderRadius">0,2,2,0</CornerRadius>

    <!-- Button Metrics -->
    <Thickness x:Key="ButtonPadding">8,3</Thickness>
    <Thickness x:Key="DialogButtonPadding">15,3</Thickness>
    <Thickness x:Key="IconButtonPadding">3</Thickness>
    <Thickness x:Key="PressedButtonBorderThickness">1</Thickness>
    <Thickness x:Key="PressedLeftSegmentButtonBorderThickness">1,1,0,1</Thickness>
    <Thickness x:Key="PressedCenterSegmentButtonBorderThickness">1,1,0,1</Thickness>
    <Thickness x:Key="PressedRightSegmentButtonBorderThickness">1</Thickness>
    <sys:Double x:Key="ButtonIconWidth">20</sys:Double>
    <sys:Double x:Key="ButtonIconHeight">20</sys:Double>
    <Thickness x:Key="BulletToggleButtonPadding">11,3,6,3</Thickness>
    <Thickness x:Key="BarToggleButtonPadding">8,3,8,5</Thickness>
    <Thickness x:Key="BulletIconToggleButtonPadding">11,3,3,3</Thickness>
    <Thickness x:Key="BarIconToggleButtonPadding">3,3,3,7</Thickness>
    <Thickness x:Key="ToggleButtonBulletMargin">2</Thickness>
    <Thickness x:Key="ToggleButtonBarMargin">9,2</Thickness>

    <!-- TextBox Metrics -->
    <Thickness x:Key="TextBoxPadding">5,3</Thickness>

    <Style x:Key="SegmentedControlStyle" TargetType="Control">
        <Style.Triggers>
            <Trigger Property="proj:SkinHelper.Segment" Value="Left">
                <Setter Property="Margin" Value="{StaticResource LeftSegmentControlMargin}" />
                <Setter Property="BorderThickness" Value="{StaticResource LeftSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource LeftSegmentControlBorderRadius}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Center">
                <Setter Property="Margin" Value="{StaticResource CenterSegmentControlMargin}" />
                <Setter Property="BorderThickness" Value="{StaticResource CenterSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource CenterSegmentControlBorderRadius}" />
            </Trigger>
            <Trigger Property="proj:SkinHelper.Segment" Value="Right">
                <Setter Property="Margin" Value="{StaticResource RightSegmentControlMargin}" />
                <Setter Property="BorderThickness" Value="{StaticResource RightSegmentControlBorderThickness}" />
                <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource RightSegmentControlBorderRadius}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SegmentedButtonStyle" TargetType="ButtonBase" BasedOn="{StaticResource SegmentedControlStyle}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="None" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Left" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedLeftSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Center" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedCenterSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="proj:SkinHelper.Segment" Value="Right" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="{StaticResource PressedRightSegmentButtonBorderThickness}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Button Styles -->
    <Style TargetType="ButtonBase" BasedOn="{StaticResource SegmentedButtonStyle}">
        <Setter Property="Background" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="FontSize" Value="{StaticResource UIFontSize}" />
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding (proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}" />
    </Style>

    <Style x:Key="DialogButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="{StaticResource DialogButtonPadding}" />
    </Style>

    <Style TargetType="ToggleButton" BasedOn="{StaticResource SegmentedButtonStyle}">
        <Setter Property="Background" Value="{StaticResource LightControlFaceColor}" />
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}" />
        <Setter Property="FontSize" Value="{StaticResource UIFontSize}" />
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}" />
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
    </Style>

    <Style x:Key="BulletToggleButtonStyleBase" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="{StaticResource BulletToggleButtonPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding (proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid HorizontalAlignment="Left" Margin="{StaticResource ToggleButtonBulletMargin}" Width="7" Height="7">
                                    <Ellipse x:Name="indicatorLight" Stroke="{StaticResource LightSecondaryTextColor}" StrokeThickness="1" Fill="{StaticResource LightSecondaryTextColor}" />
                                </Grid>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="indicatorLight" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.IndicatorBrush)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BarToggleButtonStyleBase" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="{StaticResource BarToggleButtonPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding (proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid VerticalAlignment="Bottom" Margin="{StaticResource ToggleButtonBarMargin}" Height="3">
                                    <Border x:Name="indicatorLight" BorderBrush="{StaticResource LightSecondaryTextColor}" BorderThickness="1" CornerRadius="1" Background="{StaticResource LightSecondaryTextColor}" />
                                </Grid>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="indicatorLight" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.IndicatorBrush)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FaceToggleButtonStyleBase" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="pushEffectBorder">
                        <Border x:Name="border" CornerRadius="{Binding (proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="{StaticResource PressedButtonBorderThickness}" />
                            <Setter Property="Padding" TargetName="pushEffectBorder" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(proj:SkinHelper.IndicatorBrush)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightDisabledControlFaceColor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightDisabledControlBorderColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BulletToggleButtonStyle1" TargetType="ToggleButton" BasedOn="{StaticResource BulletToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor1}" />
    </Style>

    <Style x:Key="BulletToggleButtonStyle2" TargetType="ToggleButton" BasedOn="{StaticResource BulletToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor2}" />
    </Style>

    <Style x:Key="BulletToggleButtonStyle3" TargetType="ToggleButton" BasedOn="{StaticResource BulletToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor3}" />
    </Style>

    <Style x:Key="BarToggleButtonStyle1" TargetType="ToggleButton" BasedOn="{StaticResource BarToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor1}" />
    </Style>

    <Style x:Key="BarToggleButtonStyle2" TargetType="ToggleButton" BasedOn="{StaticResource BarToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor2}" />
    </Style>

    <Style x:Key="BarToggleButtonStyle3" TargetType="ToggleButton" BasedOn="{StaticResource BarToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor3}" />
    </Style>

    <Style x:Key="FaceToggleButtonStyle1" TargetType="ToggleButton" BasedOn="{StaticResource FaceToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor1}" />
    </Style>

    <Style x:Key="FaceToggleButtonStyle2" TargetType="ToggleButton" BasedOn="{StaticResource FaceToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor2}" />
    </Style>

    <Style x:Key="FaceToggleButtonStyle3" TargetType="ToggleButton" BasedOn="{StaticResource FaceToggleButtonStyleBase}">
        <Setter Property="proj:SkinHelper.IndicatorBrush" Value="{StaticResource IndicatorLightColor3}" />
    </Style>

    <!-- TextBox Styles -->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource SegmentedControlStyle}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlBorderColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightPrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}"/>
        <Setter Property="Margin" Value="{StaticResource ControlMargin}" />
        <Setter Property="Padding" Value="{StaticResource TextBoxPadding}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="proj:SkinHelper.BorderRadius" Value="{StaticResource ControlBorderRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (proj:SkinHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{StaticResource LightBackgroundColor}" SnapsToDevicePixels="True">
                        <Grid>
                            <Rectangle Margin="0,1,0,0" RadiusX="1.4" RadiusY="1.4" Fill="{TemplateBinding Background}" />
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource LightSecondaryTextColor}" />
                            <Setter Property="BorderBrush" Value="{StaticResource LightDisabledControlBorderColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>